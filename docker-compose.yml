# 在撰写文件中，我们将从定义模式版本开始。在大多数情况下，最好使用支持的最新版本  https://docs.docker.com/compose/compose-file/
version: "3.8"

services: # 一个services 下面包含多个项目服务
  web:  # 服务1
    depends_on: # 服务启动依赖
      - postgres
    build: # 使用当前目录下的Dockerfile进行构建,build也可以指定文件路径，Dockerfile的名字.
      context: .
      dockerfile: Dockerfile
    container_name: docker-gs-ping # 容器名称
    image: docker-gs-ping:v1.0.0 # 指定生成镜像的 名称:标签    当image属性与docker-compose文件中的 build 构建上下文一起使用时，image属性值表示构建的镜像的标签。当没有构建上下文时，如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。
    hostname: docker-gs-ping  # 设置hostname 在同一子网内，可以互相用hostname访问
    networks:
      - mynet
    ports:
      - 8080:8080
    environment: # 会一开始从 .dev 中找对应的环境变量值，如果没有找到会用户默认值
      - PGUSER=${PGUSER:-postgres}
      - PGPASSWORD=${PGPASSWORD:?database password not set}
      - PGHOST=${PGHOST:-db}
      - PGPORT=${PGPORT:-5432}
      - PGDATABASE=${PGDATABASE:-postgres} # 如果环境变量指定了值就读取指定的值，不然就获取默认的 postgres
      - URL=${URL}
    deploy: # 重新启动策略
      restart_policy:
        condition: on-failure # on-failure 在容器非正常退出时（退出状态非0），才会重启容器

  postgres: # postgres 数据库
    image: postgres:latest
    container_name: my-pg
    hostname: db
    networks:
      - mynet
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=test
    volumes:
      - roach:/var/lib/postgresql/data   # 已经存在的命名的数据卷。 /var/lib/postgresql/data 为容器内数据存储地址
     # command: start-single-node  # 覆盖容器启动后默认执行的命令

volumes:  # 数据卷
  roach: # 创建数据卷名称

networks:
  mynet:
    driver: bridge  # 创建的网络时候需要指定driver（单一网络使用bridge，swarm集群使用overlay），而且driver内容不能省略